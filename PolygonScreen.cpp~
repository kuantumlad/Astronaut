#include "BaseWindow.hh"
#include "PolygonScreen.hh"
#include "Polygons.hh"
#include "Circles.hh"
#include <iostream>

#include <SFML/Graphics.hpp>

PolygonScreen::PolygonScreen(){


}


PolygonScreen::~PolygonScreen(){


}


PolygonScreen::PolygonScreen( sf::Image imageIn, int npolys_to_make, std::string color_choice){
  
  iteration_counter = 0;

  poly_manager.getOriginalSize(imageIn);  
  good_poly_manager.getOriginalSize(imageIn);

  polys = poly_manager.initPolygons(npolys_to_make, imageIn,color_choice);
  good_polys = good_poly_manager.initPolygons(npolys_to_make,imageIn,color_choice);
 
  getTrueImage(imageIn);

}

void PolygonScreen::setWigglerLimits( sf::RenderWindow &tempWindow){

  wiggle.SetWigglerPositionLimts(&tempWindow);

}


void PolygonScreen::getTrueImage(sf::Image temp_img){

  true_img = temp_img;

}

int PolygonScreen::Run(sf::RenderWindow &App){

  sf::Event event;
  while( App.pollEvent(event) ){
    if(event.type == sf::Event::Closed || sf::Keyboard::isKeyPressed(sf::Keyboard::Escape) ){
      App.close();
    }
  }
  App.clear(sf::Color::Black);

  if( iteration_counter == 0 ){
    for( int i = 0; i < polys.size(); i++ ){
      App.draw( polys[i].vertex_array );     
    }
  }

  sf::Image poly_img  =  poly_manager.getScreenshot(&App);
  double previous_loss = -poly_manager.getLoss( poly_img, true_img);

  int poly_to_change_pos = rand() % polys.size(); 
  int poly_to_change_col = rand() % polys.size();
  int change_shape = rand() % polys.size();
  
  int vertex_to_change = rand() % 3;
  int pos_or_col = rand() % 2; 
  //std::cout << " WIGGLE CIRCLE SHAPE " << change_shape <<  std::endl;
  
  if( pos_or_col == 0 ){
    std::vector<sf::Vector2f> temp_pos = polys[change_shape].getPolygonsPosition();
    //std::cout << " >> BEFORE WIGGLE " << temp_circ_pos.x << " " << temp_circ_pos.y << std::endl;	
    wiggle.WigglePosition(temp_pos[vertex_to_change]);	
    polys[change_shape].setPolygonsPosition(temp_pos);
    //std::cout << " >> AFTER  WIGGLE " << conv_point.x << " " << conv_point.y << std::endl;
  }
  else{
    std::vector<sf::Color> temp_color = polys[change_shape].getPolygonsColor();
    wiggle.WiggleColor(temp_color[vertex_to_change]);
    polys[change_shape].setPolygonsColor(temp_color);
  }  

  for( int i = 0; i < polys.size(); i++ ){
    App.draw( polys[i].vertex_array );
  }   
  App.display();

  return 1;

}

